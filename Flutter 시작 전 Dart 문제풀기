1. a의 데이터 타입을 수정해 에러를 해결해보세요.
void main() {
  int a = "Hello";
  print('a is $a.');
}

void main() {
  String a = "Hello";
  print('a is $a.');
}
-> type이 다름
-> type에는 Strings, Numbers, Booleans, Lists, Maps, Sets, Symbols등이 있음


2. a의 데이터 타입을 수정해 에러를 해결해보세요.
void main() {
  int a;
  a = null;
  print('a is $a.');
}

void main() {
  int? a;
  a = null;
  print('a is $a.');
}
-> int?는 number 또는 비어있을수있다는 뜻
-> dynamic도 있지만 보통 ?사용

3. 데이터 타입을 수정해 에러를 해결해보세요.
void main() {
  List<String> aListOfStrings = ['one', 'two', 'three'];
  List<String> aNullableListOfStrings;
  List<String> aListOfNullableStrings = ['one', null, 'three'];

  print('aListOfStrings is $aListOfStrings.');
  print('aNullableListOfStrings is $aNullableListOfStrings.');
  print('aListOfNullableStrings is $aListOfNullableStrings.');
}

void main() {
  List<String> aListOfStrings = ['one', 'two', 'three'];
  List<String>? aNullableListOfStrings;
  List<String?> aListOfNullableStrings = ['one', null, 'three'];

  print('aListOfStrings is $aListOfStrings.');
  print('aNullableListOfStrings is $aNullableListOfStrings.');
  print('aListOfNullableStrings is $aListOfNullableStrings.');
}
-> 변수자체가 null일수 있기 때문에 <String>? / 배열안에 String 또는 null을 가질수 있기 때문에 String? 사용

4. 아래 함수에서 str이 null인 경우 0을 반환하는 if문을 추가해 에러를 해결해 주세요.
int getLength(String? str) {
  // null 검사 코드를 여기에 작성해주세요.
  }
  return str.length;
}

void main() {
  print(getLength('This is a string!'));
}

int getLength(String? str) {
  // null 검사 코드를 여기에 작성해주세요.
  if (str == null) {
    return 0;
  }
  return str.length;
}

void main() {
  print(getLength('This is a string!'));
}
->if구문을 사용해 null이라면 0을 반환

5. bucketList에 "여행", "앱 출시"를 추가해보세요.
List<String> quiz() {
  List<String> bucketList = [];
  // 여기에 작성해주세요.
    
  return bucketList;
}

void main() {
  // 채점용 코드입니다. 수정하지 말아주세요!
  List<String> bucketList = quiz();
  try {
    assert(bucketList[0] == "여행");
    assert(bucketList[1] == "앱 출시");
    print("잘하셨습니다 👍👍");
  } catch(e) {
    print("다시 시도해 주세요. 😭");
  }
}


List<String> quiz() {
  List<String> bucketList = [];
  bucketList.add("여행");
  bucketList.add("앱 출시");
  return bucketList;
}

->add를 사용하여 list에 추가


6.bucketList의 첫 번째 원소를 반환해주세요.
String getFirst(List<String> bucketList) {
  // 아래에 작성해 주세요.
}

// bucketList의 마지막 원소를 반환해주세요.
String getLast(List<String> bucketList) {
  // 아래에 작성해 주세요.
}

void main() {
  // 채점용 코드입니다. 수정하지 말아주세요!
  List<String> bucketList = ["여행", "앱 출시", "퇴사"];
  try {
    assert(getFirst(bucketList) == "여행");
    assert(getLast(bucketList) == "퇴사");
    print("잘하셨습니다 👍👍");
  } catch(e) {
    print("다시 시도해 주세요. 😭");
  }
}


String getFirst(List<String> bucketList) {
  return bucketlist.first;
  return bucketlist[0];
}
String getLast(List<String> bucketList) {
  return bucketlist.last;
  return bucketlist[bucketlist.length - 1];
}
->두가지 방법 


7. 0부터 n-1까지 배열을 반환해 주세요.
// n = 3인 경우 [0, 1, 2] 반환
// n = 5인 경우 [0, 1, 2, 3, 4] 반환
// 단, 0 < n < 100
List<int> getNumberList(int n) {
  // 여기에 작성해 주세요.
  
  return [];
}


void main() {
  // 채점용 코드입니다. 수정하지 말아주세요!
  bool eq(List<int> l1, List<int> l2) {
    if(l1.length != l2.length) return false;
    for (int i=0; i<l1.length; i++) {
      if (l1[i] != l2[i]) return false;
    }
    return true;
  }
  
  try {  
    assert(eq(getNumberList(3), [0, 1, 2]));
    assert(eq(getNumberList(5), [0, 1, 2, 3, 4]));
    assert(eq(getNumberList(10), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]));
    print("잘하셨습니다 👍👍");
  } catch (e) {
    print("다시 시도해 주세요. 😭");
  }
}


List<int> getNumberList(int n) {
  List<int> results = [];
  for (int i=0; i<n; i++) {
    results.add(i);
  }
  return results;
}
->for구문으로 반환


8. fruits는 ["사과", "배", "감"]과 같이 과일 이름이 담긴 배열입니다.
// target은 fruits에 담긴 과일 이름 중 하나입니다.
// fruits 배열에 target의 개수를 반환해 주세요.
int countFruit(List<String> fruits, String target) {
  // 여기에 작성해 주세요.
  
  return 0;
}


void main() {
  // 채점용 코드입니다. 수정하지 말아주세요!
  try {  
    assert(countFruit(["바나나", "사과", "딸기", "사과", "사과", "딸기"], "바나나") == 1);
    assert(countFruit(["바나나", "사과", "딸기", "사과", "사과", "딸기"], "딸기") == 2);
    assert(countFruit(["바나나", "사과", "딸기", "사과", "사과", "딸기"], "사과") == 3);
    print("잘하셨습니다 👍👍");
  } catch (e) {
    print("다시 시도해 주세요. 😭");
  }
}


int countFruit(List<String> fruits, String target) {
  List<String> results = [];
  for (int i=0; i<fruits.length; i++) {
    if (fruits[i] != target) {
      results.add(fruits[i]);
    }
  }
  return results;
}
->for구문


10. cart에는 아래와 같은 형태로 다양한 상품이 담겨있습니다.
// cart = [
//   {"name": "사과", "price": 100, "count": 10},
//   {"name": "파인애플", "price": 500, "count": 30},
//   {"name": "딸기", "price": 250, "count": 20},
// ]
//
// name : 상품명
// price : 상품 1개의 가격
// count : 상품 개수
//
// cart에 담긴 모든 상품의 최종 가격을 반환해 주세요.
int totalPrice(List<Map<String, dynamic>> cart) {
  // 여기에 작성해 주세요.

  return 0;
}


void main() {
  // 채점용 코드입니다. 수정하지 말아주세요!
  try {
    int shopping1 = totalPrice([
      {"name": "사과", "price": 100, "count": 10},
      {"name": "파인애플", "price": 500, "count": 30},
      {"name": "딸기", "price": 250, "count": 20},
    ]);
    assert(shopping1 == 21000);
    int shopping2 = totalPrice([
      {"name": "자동차", "price": 5000, "count": 1},
      {"name": "고양이", "price": 100000, "count": 300},
    ]);
    assert(shopping2 == 30005000);
    print("잘하셨습니다 👍👍");
  } catch (e) {
    print("다시 시도해 주세요. 😭");
  }
}


int totalPrice(List<Map<String, dynamic>> cart) {
  int results = 0;
  for (Map<String, dynamic> item in cart) {
    int price = item["price"] as int;
    int count = item["count"] as int; 
    results += price * count;
  }
  return results;
}
-> dynamic을 int로 변환 as 사용
-> Map을 for구문에 넣을수있음


11. cart에는 상품(Product)들이 담겨있습니다.
// 상품에 isSale 속성이 true인 경우, 해당 상품은 반값 할인을 합니다.
// cart에 담긴 모든 상품의 최종 가격을 반환해 주세요.
double totalPrice(List<Product> cart) {
  // 여기에 작성해 주세요.
  return 0;
}

class Product {
  String name; // 이름
  int price; // 가격
  int count; // 개수
  bool isSale; // 반값 할인 여부
  
  Product({
    required this.name,
    required this.price,
    required this.count,
    required this.isSale
   });
}


void main() {
  // 채점용 코드입니다. 수정하지 말아주세요!
  try {
    double shopping1 = totalPrice([
      Product(name: "사과", price: 100, count: 10, isSale: true),
      Product(name: "파인애플", price: 500, count: 30, isSale: false),
      Product(name: "딸기", price: 250, count: 20, isSale: true),
    ]);
    assert(shopping1 == 18000);
    double shopping2 = totalPrice([
      Product(name: "자동차", price: 5000, count: 1, isSale: true),
      Product(name: "고양이", price: 700000, count: 300, isSale: false),
      Product(name: "비행기", price: 300000, count: 2, isSale: true),
    ]);
    assert(shopping2 == 210302500);
    print("잘하셨습니다 👍👍");
  } catch (e) {
    print("다시 시도해 주세요. 😭");
  }
}


double totalPrice(List<Product> cart) {
  double result = 0;
  for (Product product in cart) {
    if(product.isSale == true) {
      result += (product.price * product.count) * 0.5;
    } else {
      result += product.price * product.count;
    }
  }
  return result;
}
->double type은 소수점 
->Product class에 있는 데이터 사용


12. 가격이 담긴 배열 prices를 내림차순으로 정렬한 배열을 반환해주세요.
// 예를들어,
// prices = [1, 3, 2, 4]
// 반환 값 = [4, 3, 2, 1]
// 
// 힌트 : dart sort라고 Google에 검색해 보세요.
List<int> sortByPrice(List<int> prices) {
  // 여기에 작성해 주세요.
  
  return [];
}


void main() {
  // 채점용 코드입니다. 수정하지 말아주세요!
  bool eq(List<int> l1, List<int> l2) {
    if(l1.length != l2.length) return false;
    for (int i=0; i<l1.length; i++) {
      if (l1[i] != l2[i]) return false;
    }
    return true;
  }
  try {
    List<int> shopping1 = sortByPrice([100, 250, 200]);
    assert(eq(shopping1, [250, 200, 100]));
    List<int> shopping2 = sortByPrice([1000, 7250, 3200, 5000]);
    assert(eq(shopping2, [7250, 5000, 3200, 1000]));
    print("잘하셨습니다 👍👍");
  } catch (e) {
    print("다시 시도해 주세요. 😭");
  }
}


List<int> sortByPrice(List<int> prices) {
  prices.sort((a, b) => b.compareTo(a));
  return prices;
}
->sort 내림차순으로 sort((a, b) => b.compareTo(a))


13. cart에는 상품(Product)들이 담겨있습니다.
// Product를 가격(price)을 기준으로 내림차순 정렬한 배열을 반환해주세요.
List<Product> sortByPrice(List<Product> cart) {
  // 여기에 작성해 주세요.
  
  return cart;
}

class Product {
  String name; // 이름
  int price; // 가격
  
  Product({
    required this.name,
    required this.price,
   });
}


void main() {
  // 채점용 코드입니다. 수정하지 말아주세요!
  bool eq(List<Product> l1, List<String> l2) {
    if(l1.length != l2.length) return false;
    for (int i=0; i<l1.length; i++) {
      if (l1[i].name != l2[i]) return false;
    }
    return true;
  }
  try {
    List<Product> shopping1 = sortByPrice([
      Product(name: "사과", price: 100),
      Product(name: "파인애플", price: 500),
      Product(name: "딸기", price: 250),
    ]);
    assert(eq(shopping1, ["파인애플", "딸기", "사과"]));
    List<Product> shopping2 = sortByPrice([
      Product(name: "자동차", price: 5000),
      Product(name: "고양이", price: 700000),
      Product(name: "비행기", price: 300000),
    ]);
    assert(eq(shopping2, ["고양이", "비행기", "자동차"]));
    print("잘하셨습니다 👍👍");
  } catch (e) {
    print("다시 시도해 주세요. 😭");
  }
}


List<Product> sortByPrice(List<Product> cart) {
  cart.sort((a, b) => b.price.compareTo(a.price));
  return cart;
}

